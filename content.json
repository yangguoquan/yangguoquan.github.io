[{"title":"使用nrm快速切换npm registry","date":"2016-12-06T16:00:00.000Z","path":"2016/12/07/note/darily-16-12-06/","text":"由于国内环境，需要畅快的使用npm需要爬梯翻墙所以很多人采用cnpm，淘宝镜像等等第三方的npm registrynrm就是一个可以快速切换第三方npm registry的工具 动手前的小贴士1cat ~/.npmrc 查看用户根目录下npm的当前信息 ps:安装nrm最好先清理掉.npmrc中的信息。记得清理前记住自己的npm用户信息和使用的私有npm地址， 1rm ~/.npmrc 删除.npmrc文件 安装nrm1➜ ~ npm install -g nrm # 安装nrm 查看npm registry123456789➜ ~ nrm ls npm ---- https://registry.npmjs.org/ cnpm --- http://r.cnpmjs.org/ taobao - https://registry.npm.taobao.org/ nj ----- https://registry.nodejitsu.com/ rednpm - http://registry.mirror.cqupt.edu.cn/ npmMirror https://skimdb.npmjs.com/registry/ edunpm - http://registry.enpmjs.org/ 添加npm registry123➜ ~ nrm add fdt http://xxx.xxx.xxx.xxx:xxxx/ add registry fdt success 使用npm registry1234➜ ~ nrm use fdt verb config Skipping project config: /Users/xxx/.npmrc. (matches userconfig) Registry has been set to: http://xxx.xxx.xxx.xxx:xxxx/ 删除npm registry123456789➜ ~ nrm del sinopia⸨░░░░░░░░░░░░░░░░░░⸩ ⠹ : verb config Skipping project config: /Users/xxx/.npmrc. (matches userconfig) delete registry sinopia success Registry has been set to: http://xxx.xxx.xxx.xxx:xxxx/➜ ~ 测试npm registry的速度1234567891011121314➜ ~ nrm test fdt fdt ---- 85ms➜ ~ nrm test* npm ---- 9270ms cnpm --- 1620ms taobao - 237ms nj ----- Fetch Error rednpm - Fetch Error npmMirror 6490ms edunpm - Fetch Error fdt ---- 47ms npm registry 切换之后最好看下当前的npm user12➜ ~ npm whoamiyou npm name 登录npm user1➜ ~ npm adduser","tags":[{"name":"npm","slug":"npm","permalink":"http://yoursite.com/tags/npm/"}]},{"title":"githug 通关笔记(二)","date":"2016-07-23T16:00:00.000Z","path":"2016/07/24/3/","text":"LEVEL 23 checkout_fileA file has been modified, but you don’t want to keep the modification. Checkout the config.rb file from the last commit. 12345678910➜ git_hug git:(master) ✗ git statusOn branch masterChanges not staged for commit: (use \"git add &lt;file&gt;...\" to update what will be committed) (use \"git checkout -- &lt;file&gt;...\" to discard changes in working directory) modified: config.rbno changes added to commit (use \"git add\" and/or \"git commit -a\")➜ git_hug git:(master) ✗ git checkout -- config.rb LEVEL 24 remoteThis project has a remote repository. Identify it.12345➜ git_hug git:(master) git remotemy_remote_repo➜ git_hug git:(master) git remote -vmy_remote_repo https://github.com/Gazler/githug (fetch)my_remote_repo https://github.com/Gazler/githug (push) LEVEL 25 remote_urlThe remote repositories have a url associated to them. Please enter the url of remote_location.12345➜ git_hug git:(master) git remote -vmy_remote_repo https://github.com/Gazler/githug (fetch)my_remote_repo https://github.com/Gazler/githug (push)remote_location https://github.com/githug/not_a_repo (fetch)remote_location https://github.com/githug/not_a_repo (push) LEVEL 26 pullYou need to pull changes from your origin repository.1234➜ git_hug git:(master) git remote -vorigin https://github.com/pull-this/thing-to-pull (fetch)origin https://github.com/pull-this/thing-to-pull (push)➜ git_hug git:(master) git pull origin master LEVEL 27 remote_addAdd a remote repository called origin with the url https://github.com/githug/githug1➜ git_hug git:(master) git remote add origin https://github.com/githug/githug LEVEL 28 pushYour local master branch has diverged from the remote origin/master branch. Rebase your commit onto origin/master and push it to remote.1234567891011121314➜ git_hug git:(master) git rebase origin/masterFirst, rewinding head to replay your work on top of it...Applying: First commitApplying: Second commitApplying: Third commit➜ git_hug git:(master) git log➜ git_hug git:(master) git push origin masterCounting objects: 6, done.Delta compression using up to 4 threads.Compressing objects: 100% (6/6), done.Writing objects: 100% (6/6), 595 bytes | 0 bytes/s, done.Total 6 (delta 2), reused 0 (delta 0)To /var/folders/ww/1r6f4ktj08b2kn54r_q75m2m0000gn/T/d20160725-3128-szhfc4/.git ba15858..b955e1e master -&gt; master LEVEL 29 diff git diff: 查看 working directory 与 staging area 之间的差异git diff –cached: 查看 repository 与 staging area 之间的差异git diff HEAD: 查看 working directory 与 repository 之间的差异 There have been modifications to the app.rb file since your last commit. Find out which line has changed.1➜ git_hug git:(master) ✗ git diff app.rb LEVEL 30 blameSomeone has put a password inside the file config.rb find out who it was.1➜ git_hug git:(master) ✗ git blame config.rb LEVEL 31 branchYou want to work on a piece of code that has the potential to break things, create the branch test_code.1234➜ git_hug git:(master) git branch test_code➜ git_hug git:(master) git branch -a* master test_code LEVEL 32 checkoutCreate and switch to a new branch called my_branch. You will need to create a branch like you did in the previous level.12➜ git_hug git:(master) git checkout -b my_branchSwitched to a new branch 'my_branch' LEVEL 33 checkout_tagYou need to fix a bug in the version 1.2 of your app. Checkout the tag v1.2.1234567891011121314➜ git_hug git:(master) git checkout v1.2Note: checking out 'v1.2'.You are in 'detached HEAD' state. You can look around, make experimentalchanges and commit them, and you can discard any commits you make in thisstate without impacting any branches by performing another checkout.If you want to create a new branch to retain commits you create, you maydo so (now or later) by using -b with the checkout command again. Example: git checkout -b &lt;new-branch-name&gt;HEAD is now at 8dcbca8... Some more changes➜ git_hug git:(8dcbca8) githug play LEVEL 34 checkout_tag_over_branchYou need to fix a bug in the version 1.2 of your app. Checkout the tag v1.2 (Note: There is also a branch named v1.2). 1234567891011121314➜ git_hug git:(master) git checkout tags/v1.2Note: checking out 'tags/v1.2'.You are in 'detached HEAD' state. You can look around, make experimentalchanges and commit them, and you can discard any commits you make in thisstate without impacting any branches by performing another checkout.If you want to create a new branch to retain commits you create, you maydo so (now or later) by using -b with the checkout command again. Example: git checkout -b &lt;new-branch-name&gt;HEAD is now at bf9a29f... Some more changes➜ git_hug git:(bf9a29f) githug play LEVEL 35 branch_atYou forgot to branch at the previous commit and made a commit on top of it. Create branch test_branch at the commit before the last.1➜ git_hug git:(master) git branch test_branch HEAD^1 LEVEL 36 delete_branchYou have created too many branches for your project. There is an old branch in your repo called ‘delete_me’, you should delete it.123456➜ git_hug git:(master) git branch -a delete_me* master➜ git_hug git:(master) git branch -d delete_meDeleted branch delete_me (was b60afe2).➜ git_hug git:(master) githug play LEVEL 37 push_branchYou’ve made some changes to a local branch and want to share it, but aren’t yet ready to merge it with the ‘master’ branch. Push only ‘test_branch’ to the remote repository123456789➜ git_hug git:(master) git push origin test_branch:test_branchCounting objects: 6, done.Delta compression using up to 4 threads.Compressing objects: 100% (6/6), done.Writing objects: 100% (6/6), 568 bytes | 0 bytes/s, done.Total 6 (delta 3), reused 0 (delta 0)To /var/folders/ww/1r6f4ktj08b2kn54r_q75m2m0000gn/T/d20160725-4625-y8n56o/.git * [new branch] test_branch -&gt; test_branch➜ git_hug git:(master) githug play LEVEL 38 mergeWe have a file in the branch ‘feature’; Let’s merge it to the master branch.1234567➜ git_hug git:(master) git merge featureUpdating e12277f..cc8ea5aFast-forward file2 | 0 1 file changed, 0 insertions(+), 0 deletions(-) create mode 100644 file2➜ git_hug git:(master) githug play LEVEL 25 fetchLooks like a new branch was pushed into our remote repository. Get the changes without merging them with the local repository12345678➜ git_hug git:(master) git fetch originremote: Counting objects: 2, done.remote: Compressing objects: 100% (2/2), done.remote: Total 2 (delta 0), reused 0 (delta 0)Unpacking objects: 100% (2/2), done.From /var/folders/ww/1r6f4ktj08b2kn54r_q75m2m0000gn/T/d20160725-5124-1vqpes6/ * [new branch] new_branch -&gt; origin/new_branch➜ git_hug git:(master) githug play LEVEL 40 rebase 其实不知道怎么翻译 git rebase 这个命令。大概意思是从某个提交分化出两个分支，然后其中一个分支需要将另一个分支的修改合并过来，但是又不想在提交记录上留下两个分支合并的痕迹，只留下一个分支以前后顺序记录两边的修改。git rebase 一个分支的所有修改在另一个分支上重新应用一遍，所以在提交记录上看，会发现一个分支的所有提交在另一个分支之前或者之后。然后删除另一个被合并的分支，保持分支简洁。 git rebase master feature 表示将 feature 上的修改在 master 上重新应用一遍 We are using a git rebase workflow and the feature branch is ready to go into master. Let’s rebase the feature branch onto our master branch.1234➜ git_hug git:(master) git log --graph --all➜ git_hug git:(master) git rebase master featureFirst, rewinding head to replay your work on top of it...Applying: add feature 在使用此命令的时候，需要非常注意的是，不要 rebase 哪些已经推送到公共库的更新，因为此操作是重新应用修改，所以公共库的更新可能已经被其他协作者所同步，如果再次 rebase 这些修改，将可能zh LEVEL 41 repack 将版本库未打包的松散对象打包 Optimise how your repository is packaged ensuring that redundant packs are removed.123456➜ git_hug git:(master) git repackCounting objects: 3, done.Writing objects: 100% (3/3), done.Total 3 (delta 0), reused 0 (delta 0)➜ git_hug git:(master) git repack -dNothing new to pack. LEVEL 42 cherry-pickYour new feature isn’t worth the time and you’re going to delete it. But it has one commit that fills in README file, and you want this commit to be on the master as well.12345678➜ git_hug git:(master) git log --all➜ git_hug git:(master) git log➜ git_hug git:(master) git cherry-pick ca32a6dac7b6f97975edbe19a4296c2ee7682f68[master c9da2c1] Filled in README.md with proper input Author: Andrey &lt;aslushnikov@gmail.com&gt; Date: Wed Mar 28 02:25:51 2012 +0400 1 file changed, 1 insertion(+), 2 deletions(-)➜ git_hug git:(master) githug play LEVEL 43 grepYour project’s deadline approaches, you should evaluate how many TODOs are left in your code123456➜ git_hug git:(master) git grep TODO***************************app.rb:# TODO Make site url variable.app.rb:# TODO Make API version variable.app.rb:# TODO Redirecting queries could be useful.config.rb: # TODO Move password to a configuration file. LEVEL 44 rename_commit 重命名提交。当涉及提交修改时，应该想到 git rebase -i 命令，它接受可以一个参数（提交的哈希值），它将罗列出此提交之后的所有提交，然后可以对个个提交做对应的操作。 Correct the typo in the message of your first (non-root) commit.12345678910111213141516171819202122232425262728293031323334353637➜ git_hug git:(master) git log*********************commit dbcd84136938da9e67c4765962c7ad0366444cabAuthor: guoquan.yang &lt;guoquan.yang@hkfdt.cn&gt;Date: Mon Jul 25 20:59:07 2016 +0800 Second commitcommit e7c48c73b08b6647999a619221b6adb0c1c475b9Author: guoquan.yang &lt;guoquan.yang@hkfdt.cn&gt;Date: Mon Jul 25 20:59:07 2016 +0800 First coommitcommit 16314a97687ea770ae1917eb33b6d3a016f4eef8Author: guoquan.yang &lt;guoquan.yang@hkfdt.cn&gt;Date: Mon Jul 25 20:59:07 2016 +0800 Initial commit**********************➜ git_hug git:(master) git rebase -i 16314a97687ea770ae1917eb33b6d3a016f4eef8**********************//将pick 改为 reword 可以进入修改# Commands:# p, pick = use commit# r, reword = use commit, but edit the commit message# e, edit = use commit, but stop for amending# s, squash = use commit, but meld into previous commit# f, fixup = like \"squash\", but discard this commit's log message# x, exec = run command (the rest of the line) using shell# d, drop = remove commit**********************[detached HEAD 7656225] First commit Date: Mon Jul 25 20:59:07 2016 +0800 1 file changed, 0 insertions(+), 0 deletions(-) create mode 100644 file1Successfully rebased and updated refs/heads/master. LEVEL 45 squashYou have committed several times but would like all those changes to be one commit.1234567891011121314151617181920➜ git_hug git:(master) git log➜ git_hug git:(master) git rebase -i 260b9e8e38e8b9f0589bf497205dd7ab0f44e2a1**********************//将pick 改为 squash 可以将当前提交合并到上一个提交# Commands:# p, pick = use commit# r, reword = use commit, but edit the commit message# e, edit = use commit, but stop for amending# s, squash = use commit, but meld into previous commit# f, fixup = like \"squash\", but discard this commit's log message# x, exec = run command (the rest of the line) using shell# d, drop = remove commit**********************[detached HEAD a1df36a] Adding README Date: Mon Jul 25 21:00:21 2016 +0800 1 file changed, 3 insertions(+) create mode 100644 READMESuccessfully rebased and updated refs/heads/master.➜ git_hug git:(master) git log LEVEL 46 merge_squashMerge all commits from the long-feature-branch as a single commit.123456789101112131415161718192021➜ git_hug git:(master) git branch -a long-feature-branch* master➜ git_hug git:(master) git log --all➜ git_hug git:(master) git log --graph --all➜ git_hug git:(master) git merge --squash long-feature-branchSquash commit -- not updating HEADAutomatic merge went well; stopped before committing as requested➜ git_hug git:(master) ✗ git log➜ git_hug git:(master) ✗ git statusOn branch masterChanges to be committed: (use \"git reset HEAD &lt;file&gt;...\" to unstage) new file: file3➜ git_hug git:(master) ✗ git commit -m \"merge long-feature-branch\"[master c287b0d] merge long-feature-branch 1 file changed, 3 insertions(+) create mode 100644 file3➜ git_hug git:(master) githug play LEVEL 47 reorderYou have committed several times but in the wrong order. Please reorder your commits.12345➜ git_hug git:(master) git log➜ git_hug git:(master) git rebase -i 1c72c4cab5e020b7bf3cda152711e3444b7ce447Successfully rebased and updated refs/heads/master.//将 second commit 和third commit 顺序替换即可➜ git_hug git:(master) git log LEVEL 48 bisectA bug was introduced somewhere along the way. You know that running ruby prog.rb 5 should output 15. You can also run make test. What are the first 7 chars of the hash of the commit that introduced the bug. 1234567891011121314151617181920212223242526272829303132333435➜ git_hug git:(master) git log//找到第一次递交的hash值 f608824888b➜ git_hug git:(master) git bisect start master f608824888bBisecting: 9 revisions left to test after this (roughly 3 steps)[fdbfc0d403e5ac0b2659cbfa2cbb061fcca0dc2a] Another Commit➜ git_hug git:(fdbfc0d) git bisect run make testrunning make testruby prog.rb 5 | ruby test.rbBisecting: 4 revisions left to test after this (roughly 2 steps)[18ed2ac1522a014412d4303ce7c8db39becab076] Another Commitrunning make testruby prog.rb 5 | ruby test.rbmake: *** [test] Error 1Bisecting: 2 revisions left to test after this (roughly 1 step)[9f54462abbb991b167532929b34118113aa6c52e] Another Commitrunning make testruby prog.rb 5 | ruby test.rbBisecting: 0 revisions left to test after this (roughly 1 step)[5db7a7cb90e745e2c9dbdd84810ccc7d91d92e72] Another Commitrunning make testruby prog.rb 5 | ruby test.rb18ed2ac1522a014412d4303ce7c8db39becab076 is the first bad commitcommit 18ed2ac1522a014412d4303ce7c8db39becab076Author: Robert Bittle &lt;guywithnose@gmail.com&gt;Date: Mon Apr 23 06:52:10 2012 -0400 Another Commit:100644 100644 917e70054c8f4a4a79a8e805c0e1601b455ad236 7562257b8e6446686ffc43a2386c50c254365020 M prog.rbbisect run success➜ git_hug git:(5db7a7c) githug play********************************************************************************* Githug *********************************************************************************What are the first 7 characters of the hash of the commit that introduced the bug? 18ed2ac1522a014412d4303ce7c8db39becab076 LEVEL 49 stage_linesYou’ve made changes within a single file that belong to two different features, but neither of the changes are yet staged. Stage only the changes belonging to the first feature. 12345678910111213141516171819202122232425262728293031323334353637➜ git_hug git:(master) ✗ git statusOn branch masterChanges not staged for commit: (use \"git add &lt;file&gt;...\" to update what will be committed) (use \"git checkout -- &lt;file&gt;...\" to discard changes in working directory) modified: feature.rbno changes added to commit (use \"git add\" and/or \"git commit -a\")➜ git_hug git:(master) ✗ git add -p feature.rbdiff --git a/feature.rb b/feature.rbindex 1a271e9..4a80dda 100644--- a/feature.rb+++ b/feature.rb@@ -1 +1,3 @@ this is the class of my feature+This change belongs to the first feature+This change belongs to the second featureStage this hunk [y,n,q,a,d,/,e,?]? e// 进入vim 编辑器 删除 +This change belongs to the second feature// 保存退出➜ git_hug git:(master) ✗ git diff feature.rb➜ git_hug git:(master) ✗ git statusOn branch masterChanges to be committed: (use \"git reset HEAD &lt;file&gt;...\" to unstage) modified: feature.rbChanges not staged for commit: (use \"git add &lt;file&gt;...\" to update what will be committed) (use \"git checkout -- &lt;file&gt;...\" to discard changes in working directory) modified: feature.rb➜ git_hug git:(master) ✗ githug play LEVEL 50 find_old_branchYou have been working on a branch but got distracted by a major issue and forgot the name of it. Switch back to that branch.1234567891011121314➜ git_hug git:(kill_the_batman) git reflog894a16d HEAD@&#123;0&#125;: commit: commit another todo6876e5b HEAD@&#123;1&#125;: checkout: moving from solve_world_hunger to kill_the_batman324336a HEAD@&#123;2&#125;: commit: commit todo6876e5b HEAD@&#123;3&#125;: checkout: moving from blowup_sun_for_ransom to solve_world_hunger6876e5b HEAD@&#123;4&#125;: checkout: moving from kill_the_batman to blowup_sun_for_ransom6876e5b HEAD@&#123;5&#125;: checkout: moving from cure_common_cold to kill_the_batman6876e5b HEAD@&#123;6&#125;: commit (initial): initial commit➜ git_hug git:(kill_the_batman) git checkout solve_world_hungerSwitched to branch 'solve_world_hunger'➜ git_hug git:(solve_world_hunger) githug play LEVEL 51 revertYou have committed several times but want to undo the middle commit.All commits have been pushed, so you can’t change existing history. 与 reset 不同的是，revert 只会撤销当前的 commit，而之后的 commit 操作的修改还会保留，但是reset 还会将之后的所有 commit 操作的修改全部退回 staging area 或丢弃。 12 LEVEL 52LEVEL 53","tags":[{"name":"git","slug":"git","permalink":"http://yoursite.com/tags/git/"}]},{"title":"githug 通关笔记(一)","date":"2016-06-14T16:00:00.000Z","path":"2016/06/15/2/","text":"git 安装git官网去官网下载最新的git安装包，按照步骤安装即可。 windows下方便使用的话，可以将 git bash here 和 git GUI here 打勾这样鼠标右键菜单栏会自动将这两个工具集成 git 工具 — [SourceTree]很方便的一个git可视化版本管理工具。界面很清爽直观。对于不擅长git指令的小白还是很容易上手的。windows和mac平台都支持。github仓库。没有一个程序猿不知道它把。 githug(https://github.com/Gazler/githug) 安装 Githug 提供一个实用，轻松的方式来学习 Git，它包括一系列级别的划分，适合各种程度的用户。用户需要用 Git 命令来保证答案的正确。 安装1gem install githug //安装githug 开始游戏1githug //启动 游戏指令123456githug help [TASK] # Describe available tasks or one specific taskgithug hint # Get a hint for the current level（当前关卡获得提示）githug levels # List all of the levels（查看所有关卡）githug play # Initialize the game（验证游戏）githug reset # Reset the current level（初始化当前关卡）githug test # Test a level from a file path（） githug 通关指南Start1➜ ~ githug LEVEL 1 init12➜ git_hug git initInitialized empty Git repository in /Users/FDT/YgqSpace/githug/git_hug/.git/ LEVEL 2 configSet up your git name and email, this is important so that your commits can be identified.12➜ git_hug git:(master) git config --local user.name yxx➜ git_hug git:(master) git config --local user.email yxx@gmail.com LEVEL 3 addNote: You start each level with a new repo. Don’t look for files from the previous one.1➜ git_hug git:(master) ✗ git add README LEVEL 4 commitThe README file has been added to your staging area, now commit it.1➜ git_hug git:(master) ✗ git commit -m \"your commit note\" LEVEL 5 cloneClone the repository at https://github.com/Gazler/cloneme.1➜ git_hug git clone https://github.com/Gazler/cloneme LEVEL 6 clone_to_folderClone the repository at https://github.com/Gazler/cloneme to my_cloned_repo.1➜ git_hug git clone https://github.com/Gazler/cloneme my_cloned_repo LEVEL 7 ignoreThe text editor ‘vim’ creates files ending in .swp (swap files) for all files that are currently open. We don’t want them creeping into the repository. Make this repository ignore .swp files.123456789101112➜ git_hug git:(master) ✗ vim .gitignore//进入vim编辑器********************************************************************************.profile.yml.gitignore*.swp //新增忽略规则//保存并退出:wq******************************************************************************** LEVEL 8 includeNotice a few files with the ‘.a’ extension. We want git to ignore all but the ‘lib.a’ file.1234567891011➜ git_hug git:(master) vim .gitignore//进入vim编辑器********************************************************************************.profile.yml.gitignore*.a //忽略所有的.a 文件!lib.a //出去lib.a 文件//保存并退出:wq******************************************************************************** LEVEL 9 statusThere are some files in this repository, one of the files is untracked, which file is it?123456789101112131415161718➜ git_hug git:(master) ✗ git statusOn branch masterInitial commitChanges to be committed: (use \"git rm --cached &lt;file&gt;...\" to unstage) new file: Guardfile new file: README new file: config.rb new file: deploy.rb new file: setup.rbUntracked files: (use \"git add &lt;file&gt;...\" to include in what will be committed) database.yml // 此文件就是关卡所需要查看到的文件 LEVEL 10 number_of_files_committedThere are some files in this repository, how many of the files will be committed?12345678910111213141516171819➜ git_hug git:(master) ✗ git statusOn branch masterChanges to be committed: (use \"git reset HEAD &lt;file&gt;...\" to unstage) new file: rubyfile1.rb modified: rubyfile4.rbChanges not staged for commit: (use \"git add &lt;file&gt;...\" to update what will be committed) (use \"git checkout -- &lt;file&gt;...\" to discard changes in working directory) modified: rubyfile5.rbUntracked files: (use \"git add &lt;file&gt;...\" to include in what will be committed) rubyfile6.rb rubyfile7.rb 查看git状态可以看出rubyfile1.rb rubyfile4.rb这两个文件已经通过 git add 指令加入，将会commitrubyfile5.rb 文件已经改变但是没有 addrubyfile6.rb rubyfile7.rb这两个文件还未加入监视 LEVEL 11 rmA file has been removed from the working tree, however the file was not removed from the repository. Find out what this file was and remove it.1234567891011➜ git_hug git:(master) ✗ git statusOn branch masterChanges not staged for commit: (use \"git add/rm &lt;file&gt;...\" to update what will be committed) (use \"git checkout -- &lt;file&gt;...\" to discard changes in working directory) deleted: deleteme.rbno changes added to commit (use \"git add\" and/or \"git commit -a\")➜ git_hug git:(master) ✗ git rm deleteme.rbrm 'deleteme.rb' LEVEL 12 rm_cachedA file has accidentally been added to your staging area, find out which file and remove it from the staging area. NOTE Do not remove the file from the file system, only from git.123456789101112➜ git_hug git:(master) ✗ git statusOn branch masterInitial commitChanges to be committed: (use \"git rm --cached &lt;file&gt;...\" to unstage) new file: deleteme.rb➜ git_hug git:(master) ✗ git rm --cache deleteme.rbrm 'deleteme.rb' 将一个新文件从 staging area 中删除。按照要求，不应该直接从硬盘上删除这个文件，只是从 Git 中删除而已。加上 --cache 可以是文件只是从 staging area 中移除，不会真正的删除物理文件.如果要连这个物理文件也一起删除，请使用 -f 选项 LEVEL 13 stashYou’ve made some changes and want to work on them later. You should save them, but don’t commit them.1234567891011121314151617➜ git_hug git:(master) ✗ git stashSaved working directory and index state WIP on master: 0206059 Add some lyricsHEAD is now at 0206059 Add some lyrics//待会工作完之后➜ git_hug git:(master) git stash apply//具体指令可以查看帮助➜ git_hug git:(master) ✗ git stash husage: git stash list [&lt;options&gt;] or: git stash show [&lt;stash&gt;] or: git stash drop [-q|--quiet] [&lt;stash&gt;] or: git stash ( pop | apply ) [--index] [-q|--quiet] [&lt;stash&gt;] or: git stash branch &lt;branchname&gt; [&lt;stash&gt;] or: git stash [save [--patch] [-k|--[no-]keep-index] [-q|--quiet] [-u|--include-untracked] [-a|--all] [&lt;message&gt;]] or: git stash clear LEVEL 14 renameWe have a file called oldfile.txt. We want to rename it to newfile.txt and stage this change.1➜ git_hug git:(master) git mv oldfile.txt newfile.txt 重命名文件。首先这个文件需要是已经是已追踪状态，才可以使用 git mv 命令，操作完成后自动处于 staging 状态 LEVEL 15 restructureYou added some files to your repository, but now realize that your project needs to be restructured. Make a new folder named src and using Git move all of the .html files into this folder.123456➜ git_hug git:(master) mkdir src➜ git_hug git:(master) lsabout.html contact.html index.html src➜ git_hug git:(master) git mv *.html src➜ git_hug git:(master) ✗ lssrc LEVEL 16 logYou will be asked for the hash of most recent commit. You will need to investigate the logs of the repository for this.123456➜ git_hug git:(master) git logcommit f8614c9c2b4f86ce1dd0e5015dd93ea774c21efc //所需要的HASH值Author: guoquan.yang &lt;guoquan.yang@hkfdt.cn&gt;Date: Fri Jul 22 11:49:52 2016 +0800 LEVEL 17 tagWe have a git repo and we want to tag the current commit with new_tag.1234➜ git_hug git:(master) git tag new_tag//查看tag列表➜ git_hug git:(master) git tag -lnew_tag LEVEL 18 push_tags将所有本地 tag 都推送到远端。–tags 参数代表将所有的 tags 都推送到远端 There are tags in the repository that aren’t pushed into remote repository. Push them now. 1234➜ git_hug git:(master) git push --tags origin masterTotal 0 (delta 0), reused 0 (delta 0)To /var/folders/ww/1r6f4ktj08b2kn54r_q75m2m0000gn/T/d20160722-4198-iirqfw/.git * [new tag] tag_to_be_pushed -&gt; tag_to_be_pushed LEVEL 19 commit_amendThe README file has been committed, but it looks like the file forgotten_file.rb was missing from the commit. Add the file and amend your previous commit to include it.123➜ git_hug git:(master) ✗ git add forgotten_file.rb➜ git_hug git:(master) ✗ git commit --amend//这里之后直接`:wq`保存退出 LEVEL 20 commit_in_futureCommit your changes with the future date (e.g. tomorrow).1234567➜ git_hug git:(master) ✗ git commit --date=22.07.2016T00:00:00//进入编辑界面在第一行写入commit注释（add README）[master (root-commit) 372e06c] add README Date: Fri Jul 22 00:00:00 2016 +0800 1 file changed, 0 insertions(+), 0 deletions(-) create mode 100644 README LEVEL 21 reset两个文件都被添加到了 staging area, 但是只想提交其中一个。使用 git reset 可以用仓库中的版本覆盖 staging area 的版本。 git reset 使用仓库中的版本覆盖 staging area 中的，如果 working directory 该文件没有其他修改，则 staging area 中的修改将应用到 working directory 中。反之working directory 中的版本将被保留，丢弃 staging area 中的修改。 git checkout 则是使用 staging area 的中的版本覆盖 working directory。 There are two files to be committed. The goal was to add each file as a separate commit, however both were added by accident. Unstage the file to_commit_second.rb using the reset command (don’t commit anything).12345678910111213141516171819202122➜ git_hug git:(master) ✗ git statusOn branch masterChanges to be committed: (use \"git reset HEAD &lt;file&gt;...\" to unstage) new file: to_commit_first.rb new file: to_commit_second.rb➜ git_hug git:(master) ✗ git reset HEAD to_commit_second.rb➜ git_hug git:(master) ✗ git statusOn branch masterChanges to be committed: (use \"git reset HEAD &lt;file&gt;...\" to unstage) new file: to_commit_first.rbUntracked files: (use \"git add &lt;file&gt;...\" to include in what will be committed) to_commit_second.rb➜ git_hug git:(master) ✗ git commit -m \"commit\" LEVEL 22 reset_soft 撤销上一次提交。–soft 参数将上一次的修改放入 staging area–mixed 参数将上一次的修改放入 working directory–hard 参数直接将上一次的修改抛弃 You committed too soon. Now you want to undo the last commit, while keeping the index.1➜ git_hug git:(master) git reset --soft HEAD^1","tags":[{"name":"git","slug":"git","permalink":"http://yoursite.com/tags/git/"}]},{"title":"javascript有几种数据类型？","date":"2016-04-07T12:36:13.000Z","path":"2016/04/07/1/","text":"123456Number //数字String //字符串Boolean //布尔值Null //nullUndefined //undefinObject //对象 js中一元运算符 typeof 可以用来检测给定变量的数据类型 可以返回6中，但是没有null型12345678910111213console.log(typeof(1)); //numberconsole.log(typeof(NaN)); //numberconsole.log(typeof(Number.MAX_VALUE)); //numberconsole.log(typeof(POSITIVE_INFINITY)); //numberconsole.log(typeof('111')); //stringconsole.log(typeof(true)); //booleanconsole.log(typeof(window)); //objectconsole.log(typeof(document)); //objectconsole.log(typeof(null)); //objectconsole.log(typeof(Date)); //functionconsole.log(typeof(eval)); //functionconsole.log(typeof(undefined)); //undefinedconsole.log(typeof(sss)); //undefined null和undefined 的区别 null表示”没有对象”，即该处不应该有值。典型用法是： （1）作为函数的参数，表示该函数的参数不是对象。（2）作为对象原型链的终点。 12Object.getPrototypeOf(Object.prototype)// null undefined表示”缺少值”，就是此处应该有一个值，但是还没有定义。典型用法是： （1）变量被声明了，但没有赋值时，就等于undefined。（2）调用函数时，应该提供的参数没有提供，该参数等于undefined。（3）对象没有赋值的属性，该属性的值为undefined。（4）函数没有返回值时，默认返回undefined。 12345678var i;i // undefinedfunction f(x)&#123;console.log(x)&#125;f() // undefinedvar o = new Object();o.p // undefinedvar x = f();x // undefined","tags":[{"name":"javascript","slug":"javascript","permalink":"http://yoursite.com/tags/javascript/"}]},{"title":"Markdown 初始接触","date":"2016-04-06T06:15:16.000Z","path":"2016/04/06/0/","text":"文档整理自 少数派 Te_Lee 刚开始写博客，不可避免使用到markdown，作为刚接触markdown的小白，就整理一篇用的到的技术干货，作为自己的第一篇bolg。同时方便自己以后查看，之后补充自己的心得。希望可以帮到和我一样的小白。o(^▽^)o Markdown 是一种轻量级的「标记语言」，它的优点很多，目前也被越来越多的写作爱好者，撰稿者广泛使用。看到这里请不要被「标记」、「语言」所迷惑，Markdown 的语法十分简单。常用的标记符号也不超过十个，这种相对于更为复杂的HTML 标记语言来说，Markdown 可谓是十分轻量的，学习成本也不需要太多，且一旦熟悉这种语法规则，会有一劳永逸的效果。 认识Markdown 在刚才的导语里提到，Markdown 是一种用来写作的轻量级「标记语言」，它用简洁的语法代替排版，而不像一般我们用的字处理软件 Word 或 Pages 有大量的排版、字体设置。它使我们专心于码字，用「标记」语法，来代替常见的排版格式。 例如此文从内容到格式，甚至插图，键盘就可以通通搞定了。目前来看，支持 Markdown 语法的编辑器有很多，包括很多网站（例如简书）也支持了 Markdown 的文字录入。Markdown 从写作到完成，导出格式随心所欲，你可以导出 HTML 格式的文件用来网站发布，也可以十分方便的导出 PDF 格式，这种格式写出的简历更能得到 HR 的好感。甚至可以利用 CloudApp 这种云服务工具直接上传至网页用来分享你的文章，全球最大的轻博客平台 Tumblr，也支持使用 Mou 这类 Markdown 工具进行编辑并直接上传。 Markdown官方文档 这里可以看到官方的 Markdown 语法规则文档，当然，后文我也会用自己的方式，阐述这些语法在实际使用中的用法 创始人 John Gruber 的 Markdown 语法说明 Markdown 中文版语法说明 使用Markdown的优点 专注你的文字内容而不是排版样式。 轻松的导出 HTML、PDF 和本身的 .md 文件。 纯文本内容，兼容所有的文本编辑器与字处理软件。 可读，直观。适合所有人的写作语言。 使用Markdown的工具Mac平台 在 Mac OS X 上，我强烈建议你用 Mou 这款免费且十分好用的 Markdown 编辑器，它支持实时预览，既左边是你编辑 Markdown 语言，右边会实时的生成预览效果，笔者文章就是 Mou 这款应用写出来的。 其次还有很多同类选择。如果你是个编辑作者，我强烈建议你购买 Ulysses Ⅲ，这款应用入围了苹果去年 Mac App Store 的 The Best of 2013，相比 Mou 它支持更多的写作格式、多文档的支持。Mou、iA Writer 这些应用都是基于单文档的管理方式，而 Ulysses Ⅲ 支持 Folder、Filter 的管理，一个 Folder 里面可以创建多个 Sheet，Sheet 之间还可以进行 Combine 处理。Windows、iOS、Web平台 windows下的Markdown工具,有两款不错,一款叫做MarkdownPad,另一款叫做MarkPad,（Ps:当转载这篇文章的时候,推荐微软的编辑器也不错，vs code,ctrl+shift+v，可以预览效果） IOS端已经有相当多的 app 支持Markdown语法编辑,例如Drafts, Day one… Web端上,强烈推荐简书这款产品，上面有无数热爱文字的人在不停的创造、分享。在 Web 端使用 Markdown 没有比简书更舒服的地方了，它同样支持左右两栏的实时预览，字体优雅、简洁。 同样是 Web 端，Draftin 这款在线 MD 编辑器也近乎完美。 Markdown语法的简单规则 标题标题是每篇文章都需要也是最常用的格式，在 Markdown 中，如果一段文字被定义为标题，只要在这段文字前加 # 号即可。# 一级标题## 二级标题### 三级标题以此类推，总共六级标题，建议在井号（#）后加一个空格，这是最标准的 Markdown 语法。 列表熟悉 HTML 的同学肯定知道有序列表与无序列表的区别，在 Markdown 下，列表的显示只需要在文字前加上 - 或 * 即可变为无序列表，有序列表则直接在文字前加 1. 2. 3. 符号要和文字之间加上一个字符的空格。 引用如果你需要引用一小段别处的句子，那么就要用引用的格式。&gt; 例如这样只需要在文本前加入 &gt; 这种尖括号（大于号）即可 图片与链接插入链接与插入图片的语法很像，区别在一个 ! 号[BaiDu](http://www.baidu.com)![Mou icon](http://mouapp.com/Mou_128.png)BaiDu插入图片的地址需要图床，这里推荐 CloudApp 的服务，生成URL地址即可。 粗体与斜体Markdown 的粗体和斜体也非常简单，用两个 * 包含一段文本就是粗体的语法，用一个 * 包含一段文本就是斜体的语法。例如：这里是粗体 这里是斜体 表格表格是我觉得 Markdown 比较累人的地方，例子如下： | Tables | Are | Cool | | ------------- |:-------------:| -----:| | col 3 is | right-aligned | $1600 | | col 2 is | centered | $12 | | zebra stripes | are neat | $1 | 这种语法生成的表格如下： Tables Are Cool col 3 is right-aligned $1600 col 2 is centered $12 zebra stripes are neat $1 代码框如果你是个程序猿，需要在文章里优雅的引用代码框，在 Markdown 下实现也非常简单，只需要用两个 ` 把中间的代码包裹起来，如 `code` 。 实现方式有两种:第一种：简单文字出现一个代码框。使用 ` (blockquote)`。（`不是单引号而是左上角的ESC下面~中的`）第二种：大片文字需要实现代码框。使用Tab和四个空格。 分割线分割线的语法只需要另起一行，连续输入三个星号 *** 即可。 与Markdown相关的一些推荐 可配套使用的工具 Droplr Cloudapp ezShare for Mac 围脖图床修复计划 马克飞象，专为印象笔记打造的 Markdown 编辑器，非常推荐 相关文章阅读 为什么作家应该用 Markdown 保存自己的文稿 Markdown 写作浅谈 Markdown 工具补完 Drafts + Scriptogr.am + Dropbox 打造移动端 Markdown 风格博客 图灵社区 - 怎样使用 Markdown 为什么我们要学习 Markdown 的三个理由No newline at end of file","tags":[{"name":"markdown","slug":"markdown","permalink":"http://yoursite.com/tags/markdown/"}]},{"title":"Hello World","date":"2015-12-31T16:00:00.000Z","path":"2016/01/01/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]